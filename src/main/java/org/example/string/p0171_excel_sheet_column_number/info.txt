Пошаговое объяснение
Инициализация:
result = 0 - начальное значение результата

Цикл по символам строки:
- Обрабатываем каждый символ слева направо
- Для каждого символа:
    currentChar - 'A' + 1 преобразует символ в число (A→1, B→2, ..., Z→26)
    result = result * 26 + value - позиционное вычисление значения

Возврат результата:
- После обработки всех символов возвращаем итоговое число

========

Примеры работы
Для "A":
'A' → 1
result = 0*26 + 1 = 1

Для "AB":
'A' → 1: result = 0*26 + 1 = 1
'B' → 2: result = 1*26 + 2 = 28

Для "ZY":
'Z' → 26: result = 0*26 + 26 = 26
'Y' → 25: result = 26*26 + 25 = 701

=========

Особенности реализации
Преобразование символа в число:
- currentChar - 'A' + 1 - эффективное вычисление значения символа
- Можно было бы использовать (int)currentChar - 64 (ASCII A=65), но первый вариант читаемее

Эффективность:
- Временная сложность: O(n), где n - длина строки
- Пространственная сложность: O(1) - используем константное количество дополнительной памяти

==============

Альтернативные варианты
С использованием стримов (Java 8+):
public int titleToNumber(String s) {
    return s.chars()
            .map(c -> c - 'A' + 1)
            .reduce(0, (acc, x) -> acc * 26 + x);
}

Рекурсивное решение:
public int titleToNumber(String s) {
    return helper(s, 0);
}

private int helper(String s, int index) {
    if (index == s.length()) return 0;
    return (s.charAt(index) - 'A' + 1) * (int)Math.pow(26, s.length() - index - 1)
           + helper(s, index + 1);
}


